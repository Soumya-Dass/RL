import numpy as np

class ExploitationOnly:
    def __init__(self, n_arms, *args, **kwargs):
        self.n_arms = n_arms
        self.estimates = np.zeros(n_arms)
        self.pulls = np.zeros(n_arms)

    def select_arm(self):
        if np.sum(self.pulls) == 0:
            return 0
        return int(np.argmax(self.estimates))

    def update(self, chosen_arm, reward):
        self.pulls[chosen_arm] += 1
        pull_count = self.pulls[chosen_arm]
        old_estimate = self.estimates[chosen_arm]
        self.estimates[chosen_arm] = old_estimate + (1 / pull_count) * (reward - old_estimate)

    # ADDED: Method to satisfy the testing framework
    def get_estimated_optimal_arm(self):
        """Returns the arm with the highest current estimate."""
        return int(np.argmax(self.estimates))

    def reset(self):
        self.estimates = np.zeros(self.n_arms)
        self.pulls = np.zeros(self.n_arms)